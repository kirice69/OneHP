//
// Source code recreated from a .class file by IntelliJ IDEA
// (powered by FernFlower decompiler)
//

package me.Ninstet.MoreHearts;

import java.util.Iterator;
import java.util.logging.Logger;
import org.bukkit.ChatColor;
import org.bukkit.command.Command;
import org.bukkit.command.CommandSender;
import org.bukkit.configuration.file.FileConfiguration;
import org.bukkit.entity.Player;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.entity.EntityRegainHealthEvent;
import org.bukkit.event.player.PlayerJoinEvent;
import org.bukkit.event.player.PlayerQuitEvent;
import org.bukkit.event.player.PlayerRespawnEvent;
import org.bukkit.plugin.PluginDescriptionFile;
import org.bukkit.plugin.java.JavaPlugin;

public class MoreHearts extends JavaPlugin implements Listener {
    public final Logger logger = Logger.getLogger("Minecraft");
    public static MoreHearts plugin;
    SettingsManager settings = SettingsManager.getInstance();

    public MoreHearts() {
    }

    public void onEnable() {
        PluginDescriptionFile pdfFile = this.getDescription();
        this.logger.info(pdfFile.getName() + " v" + pdfFile.getVersion() + " has been enabled!");
        this.getServer().getPluginManager().registerEvents(this, this);
        FileConfiguration config = this.getConfig();
        config.options().copyDefaults(true);
        this.saveConfig();
        this.settings.setup(this);
        this.getServer().getScheduler().scheduleAsyncRepeatingTask(this, new 1(this), 0L, 8L);
    }

    public void onDisable() {
        PluginDescriptionFile pdfFile = this.getDescription();
        this.logger.info(pdfFile.getName() + " has been disabled!");
    }

    public boolean onCommand(CommandSender sender, Command cmd, String commandLabel, String[] args) {
        Player player = (Player)sender;
        if (commandLabel.equalsIgnoreCase("morehearts") || commandLabel.equalsIgnoreCase("mh")) {
            if (args.length == 0) {
                if (player.hasPermission("morehearts.admin")) {
                    player.sendMessage(ChatColor.GRAY + "/mh setdefault [Hearts]");
                    player.sendMessage(ChatColor.GRAY + "/mh set [Group] [Hearts]");
                    player.sendMessage(ChatColor.GRAY + "/mh delete [Group]");
                    player.sendMessage(ChatColor.GRAY + "/mh list");
                } else {
                    player.sendMessage(ChatColor.RED + "You do not have access to that command.");
                }
            } else if (args.length == 1) {
                if (player.hasPermission("morehearts.admin")) {
                    if (!args[0].equalsIgnoreCase("set") && !args[0].equalsIgnoreCase("delete")) {
                        if (args[0].equalsIgnoreCase("setdefault")) {
                            player.sendMessage(ChatColor.RED + "Specify the number of hearts! Type " + ChatColor.YELLOW + "/mh" + ChatColor.RED + " for help.");
                        } else if (args[0].equalsIgnoreCase("list")) {
                            player.sendMessage(ChatColor.DARK_GREEN + "Default: " + ChatColor.GREEN + this.getConfig().getInt("Default"));
                            if (this.getConfig().getConfigurationSection("Groups") == null) {
                                player.sendMessage(ChatColor.RED + "No groups have been set.");
                            } else {
                                StringBuilder sb = new StringBuilder();

                                for(String groupName : this.getConfig().getConfigurationSection("Groups").getKeys(false)) {
                                    sb.append(ChatColor.GREEN + groupName).append(ChatColor.DARK_GREEN + " (" + this.getConfig().getInt("Groups." + groupName) + "), ");
                                }

                                player.sendMessage(ChatColor.DARK_GREEN + "Groups: " + ChatColor.GREEN + sb.substring(0, sb.length() - 2) + ChatColor.DARK_GREEN + ".");
                            }
                        } else {
                            player.sendMessage(ChatColor.RED + "Unknown command! Type " + ChatColor.YELLOW + "/mh" + ChatColor.RED + " for help.");
                        }
                    } else {
                        player.sendMessage(ChatColor.RED + "Specify a group name! Type " + ChatColor.YELLOW + "/mh" + ChatColor.RED + " for help.");
                    }
                } else {
                    player.sendMessage(ChatColor.RED + "You do not have access to that command.");
                }
            } else if (args.length == 2) {
                if (player.hasPermission("morehearts.admin")) {
                    if (args[0].equalsIgnoreCase("set")) {
                        player.sendMessage(ChatColor.RED + "Specify the number of hearts for group " + ChatColor.YELLOW + args[1] + ChatColor.RED + "! Type " + ChatColor.YELLOW + "/mh" + ChatColor.RED + " for help.");
                    } else if (args[0].equalsIgnoreCase("delete")) {
                        String groupName = args[1];
                        String group = null;
                        if (this.getConfig().getConfigurationSection("Groups") == null) {
                            player.sendMessage(ChatColor.RED + "Group " + ChatColor.YELLOW + groupName + ChatColor.RED + " does not exist.");
                        } else {
                            for(String arenaNameCycle : this.getConfig().getConfigurationSection("Groups").getKeys(false)) {
                                if (groupName.equals(arenaNameCycle)) {
                                    group = groupName;
                                }
                            }

                            if (group != null) {
                                this.getConfig().set("Groups." + group, (Object)null);
                                this.saveConfig();
                                Iterator var14 = this.getConfig().getConfigurationSection("Groups").getKeys(false).iterator();
                                if (var14.hasNext()) {
                                    String unused = (String)var14.next();
                                    player.sendMessage(ChatColor.DARK_GREEN + "Group " + ChatColor.GREEN + group + ChatColor.DARK_GREEN + " has been deleted.");
                                    return true;
                                }

                                this.getConfig().set("Groups", (Object)null);
                                this.saveConfig();
                                player.sendMessage(ChatColor.DARK_GREEN + "Group " + ChatColor.GREEN + group + ChatColor.DARK_GREEN + " has been deleted.");
                            } else {
                                player.sendMessage(ChatColor.RED + "Group " + ChatColor.YELLOW + groupName + ChatColor.RED + " does not exist.");
                            }
                        }
                    } else if (args[0].equalsIgnoreCase("setdefault")) {
                        if (isInteger(args[1])) {
                            this.getConfig().set("Default", Integer.parseInt(args[1]));
                            this.saveConfig();
                            player.sendMessage(ChatColor.DARK_GREEN + "Default has been set to " + ChatColor.GREEN + args[1] + ChatColor.DARK_GREEN + " hearts.");
                        } else {
                            player.sendMessage(ChatColor.RED + "Hearts must be a number!");
                        }
                    } else {
                        player.sendMessage(ChatColor.RED + "Unknown command! Type " + ChatColor.YELLOW + "/mh" + ChatColor.RED + " for help.");
                    }
                } else {
                    player.sendMessage(ChatColor.RED + "You do not have access to that command.");
                }
            } else if (args.length == 3) {
                if (player.hasPermission("morehearts.admin")) {
                    if (args[0].equalsIgnoreCase("set")) {
                        if (isInteger(args[2])) {
                            this.getConfig().set("Groups." + args[1], Integer.parseInt(args[2]));
                            this.saveConfig();
                            player.sendMessage(ChatColor.DARK_GREEN + "Group " + ChatColor.GREEN + args[1] + ChatColor.DARK_GREEN + " has been set to " + ChatColor.GREEN + args[2] + ChatColor.DARK_GREEN + " hearts.");
                        } else {
                            player.sendMessage(ChatColor.RED + "Hearts must be a number!");
                        }
                    } else {
                        player.sendMessage(ChatColor.RED + "Unknown command! Type " + ChatColor.YELLOW + "/mh" + ChatColor.RED + " for help.");
                    }
                } else {
                    player.sendMessage(ChatColor.RED + "You do not have access to that command.");
                }
            } else {
                player.sendMessage(ChatColor.RED + "Unknown command! Type " + ChatColor.YELLOW + "/mh" + ChatColor.RED + " for help.");
            }
        }

        return false;
    }

    public static boolean isInteger(String s) {
        boolean isValidInteger = false;

        try {
            Integer.parseInt(s);
            isValidInteger = true;
        } catch (NumberFormatException var3) {
        }

        return isValidInteger;
    }

    public void checkPerm(Player player, boolean shouldSetHealth, boolean resetHealth) {
        boolean hasPerm = false;
        int maxOpHearts = this.getConfig().getInt("Default");
        if (this.getConfig().getConfigurationSection("Groups") != null) {
            for(String perm : this.getConfig().getConfigurationSection("Groups").getKeys(false)) {
                if (!player.isOp() && !player.hasPermission("morehearts.*")) {
                    if (player.hasPermission("morehearts.group." + perm.toLowerCase()) && !hasPerm) {
                        player.setMaxHealth((double)this.getConfig().getInt("Groups." + perm));
                        if (shouldSetHealth) {
                            player.setHealth((double)this.getConfig().getInt("Groups." + perm));
                        }

                        if (resetHealth && this.settings.getData().getConfigurationSection(player.getName()) != null) {
                            player.setHealth(this.settings.getData().getDouble(player.getName()));
                        }

                        hasPerm = true;
                    }
                } else if (this.getConfig().getInt("Groups." + perm) > maxOpHearts) {
                    maxOpHearts = this.getConfig().getInt("Groups." + perm);
                }
            }
        }

        if (!player.isOp() && !player.hasPermission("morehearts.*")) {
            if (!hasPerm) {
                player.setMaxHealth((double)this.getConfig().getInt("Default"));
                if (shouldSetHealth) {
                    player.setHealth((double)this.getConfig().getInt("Default"));
                }
            }
        } else {
            player.setMaxHealth((double)maxOpHearts);
            if (shouldSetHealth) {
                player.setHealth((double)maxOpHearts);
            }

            if (resetHealth && this.settings.getData().getConfigurationSection(player.getName()) != null) {
                player.setHealth(this.settings.getData().getDouble(player.getName()));
            }
        }

    }

    @EventHandler
    public void onPlayerJoin(PlayerJoinEvent event) {
        Player player = event.getPlayer();
        if (player.hasPlayedBefore()) {
            this.checkPerm(player, false, true);
        } else {
            this.checkPerm(player, true, false);
        }

    }

    @EventHandler
    public void onHealthRegain(EntityRegainHealthEvent event) {
        if (event.getEntity() instanceof Player) {
            Player player = (Player)event.getEntity();
            this.checkPerm(player, false, false);
        }

    }

    @EventHandler
    public void onPlayerRespawn(PlayerRespawnEvent event) {
        Player player = event.getPlayer();
        this.checkPerm(player, true, false);
    }

    @EventHandler
    public void onPlayerQuit(PlayerQuitEvent event) {
        Player player = event.getPlayer();
        boolean hasPerm = false;

        for(String perm : this.getConfig().getConfigurationSection("Groups").getKeys(false)) {
            if (player.hasPermission("morehearts.group." + perm.toLowerCase()) && !hasPerm) {
                this.settings.getData().set(player.getName(), player.getHealth());
                this.settings.saveData();
                hasPerm = true;
            }
        }

    }
}
